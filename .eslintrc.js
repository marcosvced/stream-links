module.exports = {
  env: {
    browser: true,
    es2021: true,
    node: true,
  },
  extends: [
    'plugin:vue/vue3-recommended',
    'plugin:vue-scoped-css/vue3-recommended',
    '@vue/eslint-config-typescript',
    '@nuxtjs/eslint-config-typescript',
  ],
  overrides: [],
  parser: 'vue-eslint-parser',
  parserOptions: {
    ecmaVersion: 'latest',
    sourceType: 'module',
  },
  plugins: ['@typescript-eslint', 'nuxt', 'vue', 'vue-scoped-css'],
  rules: {
    camelcase: 'off',
    'no-tabs': 'off',
    'no-useless-constructor': 0,
    'no-use-before-define': 0,
    'vue/multi-word-component-names': 'off',
    'vue/no-v-model-argument': 'off',
    'vue/component-tags-order': ['error', { order: ['script', 'template', 'style:not([scoped])', 'style[scoped]'] }],
    'vue/html-quotes': ['error', 'single', { avoidEscape: true }],
    'vue-scoped-css/no-unused-selector': ['error', {
      ignoreBEMModifier: false,
      captureClassesFromDoc: ['/(\\.[a-z-]+)(?::[a-z-]+)?\\s+-\\s*[^\\r\\n]+/i'],
    }],
    'vue-scoped-css/no-parent-of-v-global': ['error'],
    'vue-scoped-css/enforce-style-type': ['error', { allows: ['scoped', 'plain'] }],
    'vue-scoped-css/no-deprecated-deep-combinator': ['error'],
    'vue-scoped-css/no-parsing-error': 'off',
    'vue/no-static-inline-styles': ['error', { allowBinding: true }],
    'comma-dangle': ['error', 'always-multiline'],
    'linebreak-style': ['error', 'unix'],
    semi: ['error', 'never'],
    quotes: ['error', 'single'],
    yoda: ['error', 'always'],
  },
}
